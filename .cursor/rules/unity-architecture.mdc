# Unity Architecture Demo 프로젝트 가이드

## 🏗️ 프로젝트 구조

이 프로젝트는 Feature-Based Architecture를 사용하는 Unity 프로젝트입니다.

### 핵심 디렉토리 구조

- `Assets/Common/` - 공통 시스템 (EventSystem, StatementSystem, Routes)
- `Assets/Feature/` - 기능별 모듈 (Home, Play, Detail)
- `Assets/Sprites/` - 스프라이트 에셋
- `Assets/Settings/` - Unity 설정 파일들

### Feature 구조

각 Feature는 다음 구조를 따릅니다:

```
Feature/[FeatureName]/
├── Controller/     # 비즈니스 로직
├── View/          # UI 및 시각적 요소
└── [FeatureName].unity  # 씬 파일
```

## 📝 코딩 규칙

### 네임스페이스 규칙

- Common 시스템: `Common.[SystemName]`
- Feature 모듈: `Feature.[FeatureName].[Layer]`

### 이벤트 시스템 사용

- 이벤트 인터페이스: `IEvent` 구현
- 이벤트 디스패처: `IMonoEventDispatcher` 구현
- 이벤트 리스너: `IMonoEventListener` 구현

### 상태 머신 사용

- 상태 인터페이스: `IState<T>` 구현
- 상태 머신: `StateMachine` 클래스 사용
- UniTask를 활용한 비동기 상태 관리

### 주석 및 문서화

- 모든 public 메서드에 XML 문서화 주석 작성
- 복잡한 로직에는 인라인 주석 추가
- README.md 파일로 시스템 설명 제공

## 🔧 개발 도구

### 패키지 관리

- UniTask: 비동기 프로그래밍
- Addressables: 에셋 관리
- Input System: 입력 처리
- URP: 렌더링 파이프라인

### 테스트

- EditMode 테스트 사용
- 각 Feature별 테스트 작성 권장

## 🚀 배포 및 빌드

### 씬 관리

- Addressables를 통한 씬 로딩
- RouteNames 클래스에서 씬 경로 관리

### 에셋 관리

- Addressable Groups를 통한 에셋 분류
- 적절한 에셋 번들링 전략 사용
  description:
  globs:
  alwaysApply: true

---
